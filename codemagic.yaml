workflows:
  unity-ios-activate-and-build:
    name: "Unity iOS ‚Üí TestFlight"
    instance_type: mac_mini_m2
    max_build_duration: 120

    environment:
      unity: 6000.0.37f1
      xcode: "16.4"
      groups:
        - unity_credentials           # UNITY_SERIAL, UNITY_EMAIL, UNITY_PASSWORD
        - app_store_credentials       # APP_STORE_CONNECT_PRIVATE_KEY, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_ISSUER_ID
      ios_signing:
        distribution_type: app_store
        bundle_identifier: premier.sport.blast
      vars:
        BUILD_SCRIPT: BuildIos
        UNITY_IOS_DIR: ios
        XCODE_PROJECT: "Unity-iPhone.xcodeproj"
        XCODE_SCHEME: "Unity-iPhone"
        BUNDLE_ID: "premier.sport.blast"
        APP_STORE_APPLE_ID: 6752545993
        IOS_DEPLOYMENT_TARGET: "12.0"   # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π iOS –¥–ª—è –ª–∏–Ω–∫–æ–≤–∫–∏ UserNotifications

    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: main
          include: true
          source: true

    scripts:
      - name: Activate Unity License
        script: |
          $UNITY_HOME/Contents/MacOS/Unity -batchmode -quit -logFile \
            -serial ${UNITY_SERIAL?} \
            -username ${UNITY_EMAIL?} \
            -password ${UNITY_PASSWORD?}

      - name: Generate the Xcode project from Unity
        script: |
          $UNITY_HOME/Contents/MacOS/Unity -batchmode \
            -quit \
            -logFile \
            -projectPath . \
            -executeMethod BuildScript.$BUILD_SCRIPT \
            -nographics

      # ‚¨áÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ: –ø–∞—Ç—á .xcodeproj ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º UserNotifications.framework –≤ UnityFramework –∏ Unity-iPhone
      - name: Patch Xcode project (link UserNotifications)
        script: |
          gem install xcodeproj --no-document
          ruby - <<'RUBY'
            require 'xcodeproj'

            # –ü—É—Ç—å –∫ .xcodeproj –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            path = ENV['XCODEPROJ_PATH']
            path ||= File.join(ENV['UNITY_IOS_DIR'] || 'ios', ENV['XCODE_PROJECT'] || 'Unity-iPhone.xcodeproj')

            min_ios = ENV['IOS_DEPLOYMENT_TARGET'] || '12.0'
            project = Xcodeproj::Project.open(path)

            def ensure_framework(target, framework)
              group = target.project.frameworks_group
              ref = group.files.find { |f| f.display_name == framework } ||
                    group.new_file("System/Library/Frameworks/#{framework}", :sdk_root)
              unless target.frameworks_build_phase.files_references.include?(ref)
                target.frameworks_build_phase.add_file_reference(ref, true)
              end
              # "–ø–æ—è—Å –∏ —Ä–µ–º–µ–Ω—å" ‚Äî –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –≤ OTHER_LDFLAGS
              target.add_build_setting('OTHER_LDFLAGS', "-framework #{framework}")
            end

            def set_min_ios(target, version)
              target.build_configurations.each do |cfg|
                cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = version
              end
            end

            %w[UnityFramework Unity-iPhone].each do |tname|
              if (t = project.targets.find { |x| x.name == tname })
                ensure_framework(t, 'UserNotifications.framework')
                set_min_ios(t, min_ios)
              end
            end

            project.save
            puts "[patch] Linked UserNotifications.framework to UnityFramework & Unity-iPhone, iOS >= #{min_ios} (project: #{path})"
          RUBY

      # ‚¨áÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–ø–∞–ª –≤ project.pbxproj
      - name: Verify patch
        script: |
          PBXPROJ="$UNITY_IOS_DIR/$XCODE_PROJECT/project.pbxproj"
          echo "üîé Looking for UserNotifications.framework in $PBXPROJ"
          if ! grep -n "UserNotifications.framework" "$PBXPROJ"; then
            echo "‚ùå Patch failed: UserNotifications.framework not found in $PBXPROJ"; exit 1
          fi
          echo "‚úÖ Patch OK"

      - name: Deactivate Unity License
        script: |
          /Applications/Unity\ Hub.app/Contents/Frameworks/UnityLicensingClient_V1.app/Contents/MacOS/Unity.Licensing.Client \
            --return-ulf \
            --username ${UNITY_EMAIL?} \
            --password ${UNITY_PASSWORD?}
        ignore_failure: true

      - name: Set up provisioning profiles on the Xcode project
        script: |
          xcode-project use-profiles

      - name: Increment build number (from latest TestFlight)
        script: |
          cd "$UNITY_IOS_DIR"
          agvtool new-version -all $(($(app-store-connect get-latest-testflight-build-number "$APP_STORE_APPLE_ID") + 1))

      - name: Create archive (IPA)
        script: |
          xcode-project build-ipa \
            --project "$UNITY_IOS_DIR/$XCODE_PROJECT" \
            --scheme "$XCODE_SCHEME"

    artifacts:
      - build/ios/ipa/*.ipa
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        beta_groups:
          - Internal Testers
          - External QA
        submit_to_app_store: false
      email:
        recipients:
          - melnuttallxr@icloud.com
        notify:
          success: true
          failure: false
