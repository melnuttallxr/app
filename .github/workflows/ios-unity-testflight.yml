name: Unity iOS (manual) ‚Üí TestFlight

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  BUNDLE_ID: ${{ secrets.BUNDLE_ID }}

jobs:
  unity-export-ios:
    name: Export Xcode project (Unity)
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ runner.os }}-iOS

      # üîÅ –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Xcode-–ø—Ä–æ–µ–∫—Ç –∏–∑ –∫–µ—à–∞
      - name: Restore cached Xcode export (build/iOS)
        id: cache-ios
        uses: actions/cache/restore@v4
        with:
          path: build/iOS
          key: ios-xcodeproj-${{ runner.os }}-${{ hashFiles('Assets/**','ProjectSettings/**','Packages/manifest.json','Packages/packages-lock.json') }}
          restore-keys: |
            ios-xcodeproj-${{ runner.os }}-

      - name: Xcode version
        run: xcodebuild -version

      - name: Assert UNITY_LICENSE is present
        if: steps.cache-ios.outputs.cache-hit != 'true'
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        run: |
          if [ -z "${UNITY_LICENSE}" ]; then
            echo "UNITY_LICENSE is EMPTY (secret –Ω–µ –ø—Ä–æ–±—Ä–æ—à–µ–Ω –≤ –¥–∂–æ–±)"; exit 1
          fi
          echo "UNITY_LICENSE length: $(printf %s "$UNITY_LICENSE" | wc -c)"

      - name: Normalize UNITY_LICENSE newlines
        if: steps.cache-ios.outputs.cache-hit != 'true'
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        run: |
          clean=$(printf "%s" "$UNITY_LICENSE" | tr -d '\r')
          {
            echo "UNITY_LICENSE<<EOF"
            echo "$clean"
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Build (Unity ‚Üí iOS)
        if: steps.cache-ios.outputs.cache-hit != 'true'
        uses: game-ci/unity-builder@v4
        with:
          targetPlatform: iOS
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

      - name: Save cache (Xcode export)
        if: steps.cache-ios.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: build/iOS
          key: ios-xcodeproj-${{ runner.os }}-${{ hashFiles('Assets/**','ProjectSettings/**','Packages/manifest.json','Packages/packages-lock.json') }}

      # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª
      - uses: actions/upload-artifact@v4
        if: steps.cache-ios.outputs.cache-hit != 'true'
        with:
          name: xcode-ios
          path: build/iOS

  xcode-archive-upload:
    name: Sign, archive & upload to TestFlight
    needs: [unity-export-ios]
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4  # –Ω—É–∂–µ–Ω –¥–ª—è hashFiles

      - name: Restore cached Xcode export (build/iOS)
        id: cache-ios
        uses: actions/cache/restore@v4
        with:
          path: build/iOS
          key: ios-xcodeproj-${{ runner.os }}-${{ hashFiles('Assets/**','ProjectSettings/**','Packages/manifest.json','Packages/packages-lock.json') }}
          restore-keys: |
            ios-xcodeproj-${{ runner.os }}-

      # –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ –∫–µ—à –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∑–∞–±–∏—Ä–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∂–æ–±–∞
      - uses: actions/download-artifact@v4
        if: steps.cache-ios.outputs.cache-hit != 'true'
        with:
          name: xcode-ios
          path: build/iOS

      - name: Xcode version
        id: xver
        run: echo "version=$(xcodebuild -version | tr '\n' ' ')" >> "$GITHUB_OUTPUT"

      # ‚ö°Ô∏è –ö–µ—à–∏—Ä—É–µ–º DerivedData, —á—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –∞—Ä—Ö–∏–≤
      - name: Restore Xcode DerivedData cache
        uses: actions/cache/restore@v4
        with:
          path: derived
          key: derived-${{ runner.os }}-${{ steps.xver.outputs.version }}-${{ hashFiles('build/iOS/**/*.xcodeproj/project.pbxproj') }}
          restore-keys: |
            derived-${{ runner.os }}-

      - name: Install xcpretty
        run: sudo gem install xcpretty -N

      - name: Import signing certificate (.p12)
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_P12_PASSWORD }}

      - name: Install provisioning profile
        run: |
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/appstore.mobileprovision"
          echo "${{ secrets.IOS_MOBILEPROVISION_BASE64 }}" | base64 --decode > "$PROFILE_PATH"

      - name: Bump build number (CFBundleVersion)
        run: |
          cd build/iOS
          agvtool new-version -all $GITHUB_RUN_NUMBER || true

      - name: Archive (manual signing)
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          PROFILE_NAME: ${{ secrets.IOS_PROFILE_NAME }}   # –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è —Ä–æ–≤–Ω–æ –∫–∞–∫ –≤ Apple Developer (Name)
        run: |
          set -euo pipefail
          cd build/iOS
          PROJ_PATH=$(find . -maxdepth 2 -name "*.xcworkspace" -print -quit)
          if [ -n "$PROJ_PATH" ]; then
            PROJ=(-workspace "$PROJ_PATH")
          else
            PROJ_PATH=$(find . -maxdepth 2 -name "*.xcodeproj" -print -quit)
            if [ -z "$PROJ_PATH" ]; then
              echo "‚ùå –ù–∏ .xcworkspace, –Ω–∏ .xcodeproj –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ $(pwd)."; ls -la; exit 66
            fi
            PROJ=(-project "$PROJ_PATH")
          fi

          # üîí –ñ—ë—Å—Ç–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º app-—Å—Ö–µ–º—É Unity-iPhone
          SCHEME="Unity-iPhone"

          echo "‚úÖ Using project: $PROJ_PATH"
          echo "‚úÖ Using scheme : $SCHEME"
          echo "‚úÖ Using profile: ${PROFILE_NAME}"

          set -o pipefail
          xcodebuild "${PROJ[@]}" \
            -scheme "$SCHEME" \
            -configuration Release \
            -archivePath out.xcarchive \
            -derivedDataPath ../derived \
            -destination 'generic/platform=iOS' \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="${TEAM_ID}" \
            PRODUCT_BUNDLE_IDENTIFIER="${BUNDLE_ID}" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="${PROFILE_NAME}" \
            PROVISIONING_PROFILE_SPECIFIER[sdk=iphoneos*]="${PROFILE_NAME}" \
            clean archive | xcpretty

      - name: Sanity check archive (detect Generic Archive)
        run: |
          set -euo pipefail
          cd build/iOS
          /usr/bin/plutil -p out.xcarchive/Info.plist || true
          # –±—ã—Å—Ç—Ä—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä App Archive
          if ! /usr/bin/plutil -extract ApplicationProperties xml1 -o - out.xcarchive/Info.plist >/dev/null 2>&1; then
            echo "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ Generic Archive (–Ω–µ—Ç ApplicationProperties)."
            # –ß–∏—Å—Ç–∏–º DocC —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ Applications —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if [ -d out.xcarchive/Products/Applications ]; then
              echo "–ü–æ–ø—Ä–æ–±—É–µ–º —É–±—Ä–∞—Ç—å DocC-–ø–∞–∫–µ—Ç—ã —Ä—è–¥–æ–º —Å .app‚Ä¶"
              find out.xcarchive/Products/Applications -maxdepth 1 -type d -name "*.docarchive" -print -exec rm -rf {} \; || true
            else
              echo "–ù–µ—Ç out.xcarchive/Products/Applications ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é DocC-—á–∏—Å—Ç–∫—É."
            fi
          fi
          # –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
          if ! /usr/bin/plutil -extract ApplicationProperties xml1 -o - out.xcarchive/Info.plist >/dev/null 2>&1; then
            echo "‚ùå –ê—Ä—Ö–∏–≤ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É Generic. –ß–∞—Å—Ç–∞—è –ø—Ä–∏—á–∏–Ω–∞ ‚Äî –≤—ã–±—Ä–∞–Ω –Ω–µ app-scheme –∏–ª–∏ Skip Install –Ω–µ–≤–µ—Ä–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
            exit 70
          fi

      - name: Create ExportOptions.plist (App Store)
        env:
          PROFILE_NAME: ${{ secrets.IOS_PROFILE_NAME }}
        run: |
          set -euo pipefail
          cd build/iOS
          /usr/bin/python3 - <<'PY'
          import os, plistlib
          plist = {
            "method": "app-store",
            "destination": "export",
            "signingStyle": "manual",
            "provisioningProfiles": { os.environ["BUNDLE_ID"]: os.environ["PROFILE_NAME"] },
            "signingCertificate": "Apple Distribution",
            "stripSwiftSymbols": True,
            "uploadSymbols": True
          }
          with open("ExportOptions.plist","wb") as f:
              plistlib.dump(plist, f)
          PY
          /usr/bin/plutil -lint ExportOptions.plist
          /usr/bin/plutil -p ExportOptions.plist

      - name: Export IPA
        run: |
          set -euo pipefail
          cd build/iOS
          xcodebuild -exportArchive \
            -archivePath out.xcarchive \
            -exportPath out \
            -exportOptionsPlist ExportOptions.plist | xcpretty
          ls -lah out

      - name: Setup Ruby & fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install fastlane
        run: gem install fastlane -N

      - name: Write asc_api_key.json
        run: |
          cat > asc_api_key.json <<JSON
          { "key_id":"${{ secrets.ASC_KEY_ID }}",
            "issuer_id":"${{ secrets.ASC_ISSUER_ID }}",
            "key":"${{ secrets.ASC_API_KEY_P8 }}" }
          JSON

      - name: Upload IPA to TestFlight
        env:
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
          TESTFLIGHT_GROUPS: ${{ secrets.TESTFLIGHT_GROUPS }}
        run: |
          set -euo pipefail
          IPA=$(ls build/iOS/out/*.ipa | head -n1)
          if [ -z "${TESTFLIGHT_GROUPS}" ]; then
            fastlane pilot upload --api_key_path asc_api_key.json --apple_id "${APPLE_APP_ID}" --ipa "$IPA"
          else
            fastlane pilot upload --api_key_path asc_api_key.json --apple_id "${APPLE_APP_ID}" --ipa "$IPA" \
              --distribute_external true --groups "$TESTFLIGHT_GROUPS"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: ipa
          path: build/iOS/out/*.ipa

      # ‚ôªÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π DerivedData
      - name: Save Xcode DerivedData cache
        uses: actions/cache/save@v4
        with:
          path: derived
          key: derived-${{ runner.os }}-${{ steps.xver.outputs.version }}-${{ hashFiles('build/iOS/**/*.xcodeproj/project.pbxproj') }}
