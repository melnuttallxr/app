name: Unity iOS (manual) → TestFlight

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  BUNDLE_ID: ${{ secrets.BUNDLE_ID }}

jobs:
  unity-export-ios:
    name: Export Xcode project (Unity)
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ runner.os }}-iOS

      - name: Assert UNITY_LICENSE is present
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        run: |
          if [ -z "${UNITY_LICENSE}" ]; then
            echo "UNITY_LICENSE is EMPTY (secret не проброшен в джоб)"; exit 1
          fi
          echo "UNITY_LICENSE length: $(printf %s "$UNITY_LICENSE" | wc -c)"

      - name: Normalize UNITY_LICENSE newlines
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        run: |
          clean=$(printf "%s" "$UNITY_LICENSE" | tr -d '\r')
          {
            echo "UNITY_LICENSE<<EOF"
            echo "$clean"
            echo "EOF"
          } >> "$GITHUB_ENV"

      # ⬇️ Новое: определяем точную версию Unity и добавляем f1, если нет суффикса
      - name: Detect Unity version from ProjectVersion.txt
        run: |
          set -euo pipefail
          if [ ! -f ProjectSettings/ProjectVersion.txt ]; then
            echo "❌ ProjectSettings/ProjectVersion.txt not found"; exit 1
          fi
          ver=$(awk -F': ' '/m_EditorVersion:/{print $2}' ProjectSettings/ProjectVersion.txt | tr -d '\r' | xargs)
          if [ -z "$ver" ]; then
            echo "❌ Cannot parse m_EditorVersion"; exit 1
          fi
          if ! echo "$ver" | grep -Eq '[abfp][0-9]+$'; then
            ver="${ver}f1"
          fi
          echo "UNITY_VERSION=$ver" >> $GITHUB_ENV
          echo "✅ Using Unity version: $ver"

      - name: Build (Unity → iOS)
        uses: game-ci/unity-builder@v4
        with:
          targetPlatform: iOS
          unityVersion: ${{ env.UNITY_VERSION }}
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL:   ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD:${{ secrets.UNITY_PASSWORD }}

      - uses: actions/upload-artifact@v4
        with:
          name: xcode-ios
          path: build/iOS

  xcode-archive-upload:
    name: Sign, archive & upload to TestFlight
    needs: [unity-export-ios]
    runs-on: macos-14
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: xcode-ios
          path: build/iOS

      - name: Import signing certificate (.p12)
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_P12_PASSWORD }}

      - name: Install provisioning profile
        run: |
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/appstore.mobileprovision"
          echo "${{ secrets.IOS_MOBILEPROVISION_BASE64 }}" | base64 --decode > "$PROFILE_PATH"

      - name: Bump build number (CFBundleVersion)
        run: |
          cd build/iOS
          agvtool new-version -all $GITHUB_RUN_NUMBER || true

      # Фикс №1: авто-поиск проекта и схемы
      - name: Archive (manual signing)
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          set -euo pipefail
          cd build/iOS

          PROJ_PATH=$(find . -maxdepth 2 -name "*.xcworkspace" -print -quit)
          if [ -n "$PROJ_PATH" ]; then
            PROJ=(-workspace "$PROJ_PATH")
          else
            PROJ_PATH=$(find . -maxdepth 2 -name "*.xcodeproj" -print -quit)
            if [ -z "$PROJ_PATH" ]; then
              echo "❌ Ни .xcworkspace, ни .xcodeproj не найдено в $(pwd). Содержимое:"
              ls -la
              exit 66
            fi
            PROJ=(-project "$PROJ_PATH")
          fi

          SCHEME=$(
            xcodebuild -list -json "${PROJ[@]}" \
            | /usr/bin/python3 -c 'import sys,json;j=json.load(sys.stdin);p=j.get("workspace") or j.get("project") or {};s=p.get("schemes") or [];print(s[0] if s else "")'
          )
          if [ -z "$SCHEME" ]; then
            echo "❌ Не удалось определить scheme"; exit 66
          fi

          echo "✅ Using project: $PROJ_PATH"
          echo "✅ Using scheme : $SCHEME"

          xcodebuild "${PROJ[@]}" \
            -scheme "$SCHEME" \
            -configuration Release \
            -archivePath out.xcarchive \
            -destination 'generic/platform=iOS' \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="${BUNDLE_ID}" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            clean archive | xcpretty

      - name: Create ExportOptions.plist (manual, safe)
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          PROFILE_NAME: ${{ secrets.IOS_PROFILE_NAME }}
        run: |
          set -euo pipefail
          cd build/iOS
          /usr/bin/python3 -c 'import os,plistlib; open("ExportOptions.plist","wb").write(plistlib.dumps({"method":"app-store","signingStyle":"manual","teamID":os.environ["TEAM_ID"],"provisioningProfiles":{os.environ["BUNDLE_ID"]:os.environ["PROFILE_NAME"]},"signingCertificate":"Apple Distribution","stripSwiftSymbols":True,"uploadSymbols":True}))'
          /usr/bin/plutil -lint ExportOptions.plist
          /usr/bin/plutil -p ExportOptions.plist

      - name: Export IPA
        run: |
          set -euo pipefail
          cd build/iOS
          xcodebuild -exportArchive \
            -archivePath out.xcarchive \
            -exportPath out \
            -exportOptionsPlist ExportOptions.plist | xcpretty
          ls -lah out

      - name: Setup Ruby & fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - run: gem install fastlane

      - name: Write asc_api_key.json
        run: |
          cat > asc_api_key.json <<JSON
          { "key_id":"${{ secrets.ASC_KEY_ID }}",
            "issuer_id":"${{ secrets.ASC_ISSUER_ID }}",
            "key":"${{ secrets.ASC_API_KEY_P8 }}" }
          JSON

      - name: Upload IPA to TestFlight
        env:
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
          TESTFLIGHT_GROUPS: ${{ secrets.TESTFLIGHT_GROUPS }}
        run: |
          IPA=$(ls build/iOS/out/*.ipa | head -n1)
          if [ -z "${TESTFLIGHT_GROUPS}" ]; then
            fastlane pilot upload --api_key_path asc_api_key.json --apple_id "${APPLE_APP_ID}" --ipa "$IPA"
          else
            fastlane pilot upload --api_key_path asc_api_key.json --apple_id "${APPLE_APP_ID}" --ipa "$IPA" \
              --distribute_external true --groups "$TESTFLIGHT_GROUPS"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: ipa
          path: build/iOS/out/*.ipa
