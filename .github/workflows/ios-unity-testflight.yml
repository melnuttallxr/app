name: Unity iOS (manual) ‚Üí TestFlight

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  BUNDLE_ID: ${{ secrets.BUNDLE_ID }}

jobs:
  unity-export-ios:
    name: Export Xcode project (Unity)
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ runner.os }}-iOS

      - name: Xcode version
        run: xcodebuild -version

      - name: Assert UNITY_LICENSE is present
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        run: |
          if [ -z "${UNITY_LICENSE}" ]; then
            echo "UNITY_LICENSE is EMPTY (secret –Ω–µ –ø—Ä–æ–±—Ä–æ—à–µ–Ω –≤ –¥–∂–æ–±)"; exit 1
          fi
          echo "UNITY_LICENSE length: $(printf %s "$UNITY_LICENSE" | wc -c)"

      - name: Normalize UNITY_LICENSE newlines
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        run: |
          clean=$(printf "%s" "$UNITY_LICENSE" | tr -d '\r')
          {
            echo "UNITY_LICENSE<<EOF"
            echo "$clean"
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Build (Unity ‚Üí iOS)
        uses: game-ci/unity-builder@v4
        with:
          targetPlatform: iOS
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

      - uses: actions/upload-artifact@v4
        with:
          name: xcode-ios
          path: build/iOS

  xcode-archive-upload:
    name: Sign, archive & upload to TestFlight
    needs: [unity-export-ios]
    runs-on: macos-14
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: xcode-ios
          path: build/iOS   # –≤–∞–∂–Ω–æ: —Å—Ç—Ä–æ–≥–æ —ç—Ç–æ—Ç –ø—É—Ç—å

      - name: Inspect downloaded artifact
        run: |
          set -euxo pipefail
          pwd
          ls -la
          ls -laR build || true
          test -d build/iOS || { echo "‚ùå build/iOS –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å upload —à–∞–≥–∞."; exit 66; }

      - name: Xcode version
        run: xcodebuild -version

      - name: Install xcpretty
        run: sudo gem install xcpretty -N

      - name: Import signing certificate (.p12)
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_P12_PASSWORD }}

      - name: Install provisioning profile
        run: |
          set -euo pipefail
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/appstore.mobileprovision"
          echo "${{ secrets.IOS_MOBILEPROVISION_BASE64 }}" | base64 --decode > "$PROFILE_PATH"
          if [ ! -s "$PROFILE_PATH" ]; then
            echo "‚ùå Provisioning profile was not written or is empty at: $PROFILE_PATH"
            ls -lah "$HOME/Library/MobileDevice/Provisioning Profiles" || true
            exit 2
          fi
          echo "‚úÖ Wrote provisioning profile to: $PROFILE_PATH"

      - name: Diagnose signing setup
        run: |
          set -euo pipefail
          PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/appstore.mobileprovision"

          echo "‚Äî Env Bundle ID: ${BUNDLE_ID}"
          echo "üîê Installed signing identities:"
          security find-identity -v -p codesigning || true

          echo "üìÇ Listing profiles dir:"
          ls -lah "$HOME/Library/MobileDevice/Provisioning Profiles" || true

          if [ ! -f "$PROFILE_PATH" ]; then
            echo "‚ùå Provisioning profile not found at $PROFILE_PATH"
            exit 2
          fi

          echo "üìÑ Dumping provisioning profile to profile.plist"
          security cms -D -i "$PROFILE_PATH" > profile.plist

          echo "‚Äî Profile Name:"; /usr/libexec/PlistBuddy -c 'Print :Name' profile.plist || true
          echo "‚Äî UUID:"; /usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist || true
          echo "‚Äî TeamIdentifier:"; /usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' profile.plist || true
          echo "‚Äî application-identifier:"; /usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' profile.plist || true
          echo "‚Äî team-identifier entitlement:"; /usr/libexec/PlistBuddy -c 'Print :Entitlements:com.apple.developer.team-identifier' profile.plist || true

      - name: Bump build number (CFBundleVersion)
        run: |
          cd build/iOS
          agvtool new-version -all $GITHUB_RUN_NUMBER || true

      - name: Archive (unsigned build ‚Üí sign on export)
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          set -euo pipefail
          cd build/iOS

          PROJ_PATH=$(find . -maxdepth 2 -name "*.xcworkspace" -print -quit)
          if [ -n "$PROJ_PATH" ]; then
            PROJ=(-workspace "$PROJ_PATH")
          else
            PROJ_PATH=$(find . -maxdepth 2 -name "*.xcodeproj" -print -quit)
            if [ -z "$PROJ_PATH" ]; then
              echo "‚ùå –ù–∏ .xcworkspace, –Ω–∏ .xcodeproj –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ $(pwd)."; ls -la; exit 66
            fi
            PROJ=(-project "$PROJ_PATH")
          fi

          SCHEME="Unity-iPhone"
          echo "‚úÖ Using project: $PROJ_PATH"
          echo "‚úÖ Using scheme : $SCHEME"

          # –í–∞–∂–Ω–æ–µ: –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –Ω–∞ —ç—Ç–∞–ø–µ –∞—Ä—Ö–∏–≤–∞.
          # –¢–∞–∫ Xcode –Ω–µ –±—É–¥–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç/–ø—Ä–æ—Ñ–∏–ª—å.
          set +e
          xcodebuild "${PROJ[@]}" \
            -scheme "$SCHEME" \
            -configuration Release \
            -archivePath out.xcarchive \
            -destination 'generic/platform=iOS' \
            PRODUCT_BUNDLE_IDENTIFIER="${BUNDLE_ID}" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            PROVISIONING_PROFILE_SPECIFIER="" \
            ONLY_ACTIVE_ARCH=NO \
            BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
            | tee xcodebuild-archive.log
          STATUS=${PIPESTATUS[0]}
          set -e
          echo "xcodebuild exit code: $STATUS"
          test $STATUS -eq 0
      - name: Sanity check archive (detect Generic Archive)
        run: |
          set -euo pipefail
          cd build/iOS
          /usr/bin/plutil -p out.xcarchive/Info.plist || true
          if ! /usr/bin/plutil -extract ApplicationProperties xml1 -o - out.xcarchive/Info.plist >/dev/null 2>&1; then
            echo "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ Generic Archive (–Ω–µ—Ç ApplicationProperties)."
            echo "–ü–æ–ø—Ä–æ–±—É–µ–º —É–±—Ä–∞—Ç—å DocC-–ø–∞–∫–µ—Ç—ã —Ä—è–¥–æ–º —Å .app‚Ä¶"
            find out.xcarchive/Products/Applications -maxdepth 1 -type d -name "*.docarchive" -print -exec rm -rf {} \; || true
          fi
          if ! /usr/bin/plutil -extract ApplicationProperties xml1 -o - out.xcarchive/Info.plist >/dev/null 2>&1; then
            echo "‚ùå –ê—Ä—Ö–∏–≤ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É Generic. –ß–∞—Å—Ç–∞—è –ø—Ä–∏—á–∏–Ω–∞ ‚Äî Skip Install = YES —É –Ω–µ-app —Ç–∞—Ä–≥–µ—Ç–æ–≤ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤."; exit 70
          fi

      - name: Create ExportOptions.plist (App Store)
        env:
          PROFILE_NAME: ${{ secrets.IOS_PROFILE_NAME }}
        run: |
          set -euo pipefail
          cd build/iOS
          /usr/bin/python3 - <<'PY'
          import os, plistlib
          plist = {
            "method": "app-store",
            "destination": "export",
            "signingStyle": "manual",
            "provisioningProfiles": { os.environ["BUNDLE_ID"]: os.environ["PROFILE_NAME"] },
            "signingCertificate": "Apple Distribution",
            "stripSwiftSymbols": True,
            "uploadSymbols": True
          }
          with open("ExportOptions.plist","wb") as f:
              plistlib.dump(plist, f)
          PY
          /usr/bin/plutil -lint ExportOptions.plist
          /usr/bin/plutil -p ExportOptions.plist

      - name: Export IPA
        run: |
          set -euo pipefail
          cd build/iOS
          xcodebuild -exportArchive \
            -archivePath out.xcarchive \
            -exportPath out \
            -exportOptionsPlist ExportOptions.plist | xcpretty
          ls -lah out

      - name: Setup Ruby & fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install fastlane
        run: gem install fastlane -N

      - name: Write asc_api_key.json
        run: |
          cat > asc_api_key.json <<JSON
          { "key_id":"${{ secrets.ASC_KEY_ID }}",
            "issuer_id":"${{ secrets.ASC_ISSUER_ID }}",
            "key":"${{ secrets.ASC_API_KEY_P8 }}" }
          JSON

      - name: Upload IPA to TestFlight
        env:
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
          TESTFLIGHT_GROUPS: ${{ secrets.TESTFLIGHT_GROUPS }}
        run: |
          IPA=$(ls build/iOS/out/*.ipa | head -n1)
          if [ -z "${TESTFLIGHT_GROUPS}" ]; then
            fastlane pilot upload --api_key_path asc_api_key.json --apple_id "${APPLE_APP_ID}" --ipa "$IPA"
          else
            fastlane pilot upload --api_key_path asc_api_key.json --apple_id "${APPLE_APP_ID}" --ipa "$IPA" \
              --distribute_external true --groups "$TESTFLIGHT_GROUPS"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: ipa
          path: build/iOS/out/*.ipa
